{
	"name": "p_Master",
	"properties": {
		"activities": [
			{
				"name": "Execute p_General",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Failed",
				"dependsOn": [
					{
						"activity": "ForEach_Previous_Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "p_General",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"dayToLoad": "7",
						"silver_storage_databricks": {
							"value": "@concat('/Repos/development_repository/notebooks-databricks-dev/Lakehouse/Silver/')",
							"type": "Expression"
						},
						"gold_storage_databricks": {
							"value": "@concat('/Repos/development_repository/notebooks-databricks-dev/Lakehouse/Gold/')",
							"type": "Expression"
						},
						"dwh_storage_databricks": {
							"value": "@concat('/Repos/development_repository/notebooks-databricks-dev/Lakehouse/DWH/')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send Succesfully Email",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "ForEach_After_Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": "https://prod-96.westeurope.logic.azure.com:443/workflows/421b78d3946b475d962d9cfbea4c0899/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=A1vnMT0ZUVltAWLpmQ4qU6Z3ggPqz0MSz-O0hrdjHn8",
					"body": {
						"value": "{\n  \"title\": \"PIPELINE RUN FINISHED\",\n  \"message\": \"PIPELINE FINISHED RUNNING SUCCESSFULLY!\",\n  \"color\": \"Green\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"pipelineRunId\": \"@{pipeline().RunId}\",\n  \"time\": \"@{utcNow()}\",\n  \"details\": {\n    \"tables\": [\n      {\n        \"table\": \"fctventa\",\n        \"previous_count\": \"@{variables('previous_counts')[0]}\",\n        \"after_count\": \"@{variables('after_counts')[0]}\",\n        \"inserted_records\": \"@{variables('inserted_records')[0]}\"\n      },\n      {\n        \"table\": \"fct_matricula\",\n        \"previous_count\": \"@{variables('previous_counts')[1]}\",\n        \"after_count\": \"@{variables('after_counts')[1]}\",\n        \"inserted_records\": \"@{variables('inserted_records')[1]}\"\n      },\n      {\n        \"table\": \"fct_venta\",\n        \"previous_count\": \"@{variables('previous_counts')[2]}\",\n        \"after_count\": \"@{variables('after_counts')[2]}\",\n        \"inserted_records\": \"@{variables('inserted_records')[2]}\"\n      }\n    ]\n  }\n}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Send Failed Email",
				"type": "WebActivity",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Execute p_General",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": "https://prod-96.westeurope.logic.azure.com:443/workflows/421b78d3946b475d962d9cfbea4c0899/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=A1vnMT0ZUVltAWLpmQ4qU6Z3ggPqz0MSz-O0hrdjHn8",
					"body": {
						"value": "{\n  \"title\": \"PIPELINE RUN FAILED\",\n  \"message\": \"@{activity('Execute p_General').error.message}\n  El pipeline ha fallado en una de sus actividades. Revisa los detalles en ADF.\",\n  \"color\": \"Red\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"pipelineRunId\": \"@{pipeline().RunId}\",\n  \"time\": \"@{utcNow()}\"\n}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEach_Previous_Count",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('table_list')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get_Previous_Count",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": "SELECT COUNT(*) AS record_count FROM @{item()}",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_PostgreSql",
									"type": "DatasetReference",
									"parameters": {
										"schema": "public",
										"table": "f0calls"
									}
								}
							}
						},
						{
							"name": "previous_counts",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get_Previous_Count",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "previous_counts",
								"value": {
									"value": "@string(activity('Get_Previous_Count').output.firstRow.record_count)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ForEach_After_Count",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Execute p_General",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('table_list')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get_After_Count",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": "SELECT COUNT(*) AS record_count FROM @{item()}",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_PostgreSql",
									"type": "DatasetReference",
									"parameters": {
										"schema": "public",
										"table": "f0calls"
									}
								}
							}
						},
						{
							"name": "After_counts",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get_After_Count",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "after_counts",
								"value": {
									"value": "@string(activity('Get_After_Count').output.firstRow.record_count)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "inserted_records",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "After_counts",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "inserted_records",
								"value": {
									"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts')), '0', variables('after_counts'))), \n            int(if(empty(variables('previous_counts')), '0', variables('previous_counts')))\n        )\n    )\n)",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"variables": {
			"previous_counts": {
				"type": "String"
			},
			"after_counts": {
				"type": "String"
			},
			"inserted_records": {
				"type": "String"
			},
			"table_list": {
				"type": "Array",
				"defaultValue": [
					"fctventa",
					"fct_matricula",
					"fct_venta"
				]
			}
		},
		"folder": {
			"name": "Lakehouse/General"
		},
		"annotations": []
	}
}